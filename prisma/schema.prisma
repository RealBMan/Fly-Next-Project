// Schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}


model Hotel {
  id         Int      @id @default(autoincrement())
  name       String
  address    String
  location   String
  starRating Float?
  images     Json
  ownerId    Int
  owner      User     @relation(fields: [ownerId], references: [id])
  logoUrl   String?
  roomTypes  RoomType[] // No onDelete here
  bookings   Booking[]  // No onDelete here
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model RoomType {
  id             Int      @id @default(autoincrement())
  name           String
  amenities      String[]
  pricePerNight  Float
  availableRooms Int
  images         Json
  hotelId        Int
  // *** onDelete goes on the side WITH the foreign key field (hotelId) ***
  hotel          Hotel    @relation(fields: [hotelId], references: [id], onDelete: Cascade) // <-- CORRECT PLACE
  bookings       Booking[] // No onDelete here
}

model Booking {
  id           Int      @id @default(autoincrement())
  userId       Int
  hotelId      Int
  roomTypeId   Int
  checkInDate  DateTime
  checkOutDate DateTime
  status       String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user     User     @relation(fields: [userId], references: [id])
  // *** onDelete goes on the side WITH the foreign key fields (hotelId, roomTypeId) ***
  hotel    Hotel    @relation(fields: [hotelId], references: [id], onDelete: Cascade) // <-- CORRECT PLACE
  roomType RoomType @relation(fields: [roomTypeId], references: [id], onDelete: Cascade) // <-- CORRECT PLACE (already had it here)

  itinerary Itinerary[]
}

model Itinerary {
  id            Int   @id @default(autoincrement())
  userId        Int
  hotelBooking  Int?   //References the Hotel Room booking
  flightBooking String?   //References the flight that was booked, In the AFS API
  finalize      Boolean @default(false)

  booking      Booking?   @relation(fields: [hotelBooking], references: [id])
  user         User       @relation(fields: [userId], references: [id])      
}

// The Notification model was genereated with the use of ChatGPT
model Notification {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model User {
  id             Int       @id @default(autoincrement())
  firstName      String   
  lastName       String
  email          String    @unique
  phoneNumber    String    @unique
  profilePicture String?
  password       String
  createdAt      DateTime  @default(now())
  refreshToken    String?
  hotels   Hotel[]    // Inverse relation for Hotel
  bookings Booking[]  // Inverse relation for Booking
  itinerary Itinerary[]
  notification Notification[]
}

model City {
  id Int @id @default(autoincrement())
  name String 
  country String 
  airports Airport[]


  @@unique([name, country])
  
}

model Airport {
  Aid String @id
  code String
  name String
  cityId Int
  country String

  city City @relation(fields: [cityId], references: [id])
}